import java.math.BigInteger;
import java.lang.Math;

public class Main {

    public static void main(String[] args) {

        String b
        String e = "2123202417633953684981726309427082010090069940231271864602598464893779749091734838943125530629748329017000576033486592541619999162527164236783910678040887734203668315841394027361562363167215871533964243823371603497843056550858757619089662026830125820704117248975696961181897199752965195569406325824574598917652482123202417633953684981726309427082010090069940231271864602598464893779749091734838943125530629748329017000576033486592541619999162527164236783910678040887734203668315841394027361562363167215871533964243823371603497843056550858757619089662026830125820704117248975696961181897199752965195569406325824574598917652488616374642353473601619685960286340456790687172039952509769878545984889804597916089343196907898589615792225343675452327222950417751807532516680844510531284303223648574031102655489159850797719980602640607091396104405888903741684929452406607815001142244992098493738193581240130175782599905652285428496386163746423534736016196859602863404567906871720399525097698785459848898045979160893431969078985896157922253436754523272229504177518075325166808445105312843032236485740311026554891598507977199806026406070913961044058889037416849294524066078150011422449920984937381935812401301757825999056522854284963";
        String m

        String result1;
        String result2;
        String result3;

        BigInteger base = new BigInteger(b);
        BigInteger exp = new BigInteger(e);
        BigInteger mod = new BigInteger(m);

        int div = 1000000;
        long START, STOP, t1, t2, t3;

        FileWritter file = new FileWritter();

        SquareAndMultiply SaM = new SquareAndMultiply();
        MontgomeryLadder ML = new MontgomeryLadder();
        SlidingWindowMethod SWM = new SlidingWindowMethod();

//        SQUARE & MULTIPLY
        START = System.nanoTime();
        result1 = SaM.Exponentiation(base,exp,mod).toString();
        STOP = System.nanoTime();

        file.write(result1,"SquareAndMultiply");
        t1 = (STOP - START) / div;
        System.out.println("CZAS ALGORYTMU SQUARE & MULTIPLY: " + t1 + " ms\n");

//        MONTGOMERY LADDER
        START = System.nanoTime();
        result2 = ML.Exponentiation(base,exp,mod).toString();
        STOP = System.nanoTime();

        file.write(result2, "MontgomeryLadder");
        t2 = (STOP - START) / div;
        System.out.println("CZAS ALGORYTMU MONTGOMERY LADDER: " + t2 + " ms\n");

//        SLIDING WINDOW METHOD
        START = System.nanoTime();
        result3 = SWM.Exponentiation(base,exp,mod).toString();
        STOP = System.nanoTime();

        file.write(result3, "SlidingWindowMethod");
        t3 = (STOP - START) / div;
        System.out.println("CZAS ALGORYTMU SLIDING WINDOW METHOD: " + t3 + " ms\n");
    }
}
